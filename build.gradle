group 'io.lumigo.javaagent'

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    maven {
      name = "sonatype"
      url = uri("https://oss.sonatype.org/content/repositories/snapshots")
    }
  }
  dependencies {
    classpath "com.diffplug.spotless:spotless-plugin-gradle:6.15.0"
    classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
    classpath "io.opentelemetry.instrumentation:gradle-plugins:1.23.0-alpha-SNAPSHOT"
  }
}

subprojects {
  version = rootProject.version

  apply plugin: "java"
  apply plugin: "com.diffplug.spotless"

  ext {
    versions = [
      opentelemetrySdk           : "1.23.0",
      opentelemetryContrib       : "1.23.0-alpha",
      opentelemetryJavaagent     : "1.23.0-SNAPSHOT",
      opentelemetryJavaagentAlpha: "1.23.0-alpha-SNAPSHOT",

      bytebuddy                  : "1.13.0",
      autoservice                : "1.0.1",
      junit                      : "5.9.2"
    ]

    deps = [
      bytebuddy  : "net.bytebuddy:byte-buddy-dep:${versions.bytebuddy}",
      autoservice: [
        "com.google.auto.service:auto-service:${versions.autoservice}",
        "com.google.auto.service:auto-service-annotations:${versions.autoservice}",
      ]
    ]
  }

  repositories {
    mavenCentral()
    maven {
      name = "sonatype"
      url = uri("https://oss.sonatype.org/content/repositories/snapshots")
    }
  }

  spotless {
    java {
      googleJavaFormat()
      licenseHeaderFile(rootProject.file("./gradle/spotless.license.java"), "(package|import|public)")
      target("src/**/*.java")
    }
  }

  dependencies {
    // otel BOM
    implementation(platform("io.opentelemetry:opentelemetry-bom:${versions.opentelemetrySdk}"))

    // these serve as a test of the instrumentation BOMs
    implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:${versions.opentelemetryJavaagent}"))
    implementation(platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:${versions.opentelemetryJavaagentAlpha}"))

    testImplementation("org.mockito:mockito-core:5.1.1")
    testImplementation(enforcedPlatform("org.junit:junit-bom:${versions.junit}"))
    testImplementation("org.junit.jupiter:junit-jupiter-api:${versions.junit}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${versions.junit}")
  }

  tasks {
    test {
      useJUnitPlatform()
    }

    compileJava {
      options.release.set(8)
    }
  }
}
